• Encoding is physically transforming the input from one form to another rather than encrypting it.
  It may or may not require a secret key, as it can just be a mathematical transformation.
  Mathematical transformation can even be reversing a string or moving a few characters from one place to another using any pattern.
  The encoded result can be reverted to original input given the decoding algorithm. Example BCryptPasswordEncoder.
  
  Input -> |Encoding algorithm| -> Output
  Output -> |Decoding algorithm| -> Input

• Encrypting is the process of transforming input in such a way that to decode it we must have a secret key without which 
  decoding becomes impossible. It can also be said that, ‘encryption is encoding that always uses a secret key.’
  Encrypted data can only be decrypted given the decryption algorithm and the secret key. Example: Caesar Cypher.
  
  Input -> |encryption && secretKey| -> Output
  Output -> |decryption && secretKey| -> Input

• Hashing is transforming input in such a way that we cannot get the input back from the hashed value and two inputs with 
  same value will return same hashes. Its rules are same as they are in .hashCode() in java, 2 different objects may return 
  the same hash but 2 equal objects must return the same hash.
  Hashing the passwords makes sure that the password cannot be achieved from the hash.
  Hashes can be used to verify the data integrity.
  
  Input -> hashing -> hash
  Hash !-> input

MD5 has been found to suffer from extensive vulnerabilities, especially the risk of collision attacks. A collision attack is where two different inputs produce the same hash value, which can compromise the security and authenticity of the data2. MD5 is considered insecure for cryptographic purposes and has been deprecated in favour of more secure hash functions, such as SHA-256 and SHA-3, due to the discovery of practical collision vulnerabilities

• not to use MD5 encryption, as it depricated as it could be un-hashed to get the original input

• UserDetailService is a Core interface which loads user-specific data, It is a functional interface having
  'loadUserByUsername(String username) throws UsernameNotFoundException' as functional method.
  The interface requires only one read-only method, which simplifies support for new data-access strategies.
  It is used throughout the framework as a user DAO and is the strategy used by the DaoAuthenticationProvider to retrieve
  a username, a password, and other attributes for authenticating with a username and password.
  Spring Security provides in-memory(InMemoryUserDetailsManager) and JDBC implementations of UserDetailsService.

  we can define custom authentication by exposing a custom UserDetailsService as a bean. 

• Spring Security’s PasswordEncoder interface is used to perform a one-way transformation of a password to let the password be stored securely. 
  Given PasswordEncoder is a one-way transformation, it is not useful when the password transformation needs to be two-way 
  (such as storing credentials used to authenticate to a database). 
  Typically, PasswordEncoder is used for storing a password that needs to be compared to a user-provided password at the time of authentication.
  
  Spring Security’s servlet support includes storing passwords securely by integrating with PasswordEncoder. 
  We can customize the PasswordEncoder implementation used by Spring Security by exposing a PasswordEncoder Bean.
  We may get this if there is no password encoder at all ->PasswordEncoder: There is no PasswordEncoder mapped for the id "null"<-
  If we do not want the password to be encoded(not-recommended), we may use the NoOpPasswordEncoder.getInstance(); here, NoOpPasswordEncoder is a password encoder that does nothing.
  Useful for testing where working with plain text passwords may be preferred..

• 'InMemoryUserDetailsManager' is a Non-persistent implementation of UserDetailsManager which is backed by anin-memory map.
  Mainly intended for testing and demonstration purposes, where a full blown persistentsystem isn't required.

  Spring security--->      Sprign MVC -->| Spring web -->
  filter1 <> filter2 <> .... <> Servlet <> Controller <> Service <> ...Business application...

• 'com.spring_security.services.JpaUserDetailService.loadUserByUsername(String username) is supposed to be returning a UserDetails(i) child-object but the '
  'com.spring_security.services.UserRepository.findUserByUserName(String userName)' returns an optional. This problem can be solved in 3 ways:
  1). Make the User class implement UserDetails interface -> !!!It violates the SRP, and pollutes the Entity class
  2). Mapper, create a different class(UserDetails implementation) and use a mapper to create a copy of the User object.
 *3). Decorator Pattern, use a decorator class that delegates the 'getpassword()' and 'getUserName()' 

• At any point in the application we can use 'SecurityContextHolder' that associates a given SecurityContext with the current execution thread, to get the 'SecureityContext'
  using .getContext() and then call .getAuthentication() to get the Authentication. Using .getAuthorities() on this authentication we can know what are the authorities does this user have.

• Now by default convention, the controller is secured using 'http basic' authentication, where ID and password are Base64 encoding, and gives us a credential printed on the console to use
  for the requests.

• A filter is an object that performs filtering tasks on either the request to a resource (a servlet or static content), or on the response from a resource, or both.

• Conventionally, 'UsernamePasswordAuthenticationFilter.class' is used as filtering the requests.

• Records are final thus aspects on Records will not work.

• To use a custom filter 
  1). • We create a CustomAuthentication class that implements 'org.springframework.security.core.Authentication' interface.
      • Overrider all inherited abstract methods.
      • Create a final boolean instance variable 'authenticated', another final instance variable that holds the input key from the user, an all-args constructor, setters, and getters.
      • Return 'authenticated' from overridden isAuthenticated().
  2). • Create a CustomAuthenticationProvider class that implements 'org.springframework.security.core.AuthenticationProvider' interface.
      • Override the inherited abstract methods.
      • Mark the class with @Component so that spring creates a bean.
      • In this class we create a 'secretKey' as private final string instance variable, get it's from the properties file (or some secret vault where it is stored). 
      • In supports(), compare CustomAuthentication '.class' object to method parameter and return the result. This method is used by spring to figure if this AuthenticationProvider
        supports cretain Authentication.
      • While in authenticate(), type cast the parameter to CustomAuthentication and compare 'secretKey' instance variable value to the 
        authentications secret key (using CustomAuthentication.getSecretKey() getter). If equlaity check succeeds, return a new CustomAuthentication
        object with 'authenticated' value as true and 'secretKey' as null (coz, we would not want to expose the secret key). Else, if the secretkey differs from the user authentication key
        throw a suitable exception (BadCredentialException.class).
  3). • Create a CustomAuthenticationManager class that implements the ‘com.springframework.security.authentication.AuthenticationManager’ interface.
      • Override the inherited abstract method authenticate().
      • Create a private final instance variable of type CustomAuthenticationProvider and create an all-args constructor to initialise it.
      • Mark the class as @Component.
      • In authenticate(), check if Authentication passed in the params is supported by the CustomAuthenticationProvider, if yes then call authenticate() on CustomAuthenticationManager 
        reference passing the authentication and returning the result. Else throw an Exception.
  4). • Create a CustomAuthenticationFilter class that extends the ‘org.springframework.web.filter.OncePerRequestFilter’ interface. We could have implemented 
        'jakarta.servlet.Filter' but in that case then there would be no guarantee that the filter is called only once.
      • Further we override the 'doFilterInternal(HttpServletRequest, HttpServletResponse, FilterChain)'
      • Create a private final instance variable of type CustomAuthenticationManager and create an all-args constructor to initialise it.
      • Mark the class as @Component.
      • In doFilterInternal(), get the input secret key from request headers using .getHeader(“key”)
      • Create an object of type CustomAuthentication, that represents an authentication which is not authorised yet, with its ‘secretKey’ set to key from the request header 
        and ‘authenticated’ set to false.
      • Call the authenticate() on the AuthenticationManager instance variable and pass the authentication created above. Get the hold of returned Authentication instance.
      • If the authentication is successful (returned Authentication has ‘authenticated’ as true), then get hold of the security context and set this authentication for context. 
        And call the doFilter() of the filter from params passing request and response, this sends the request to next filter in the filter chain. 

• HttpSecurity acts as the central configuration point for defining various security aspects, ensuring the application's
  data and functionalities are protected from unauthorized access and malicious activities. Thus, we ask spring to inject 'HttpSecurity' into the SecurityFilterChain creating @Bean method
  and add the filter to it.

• 'jakarta.servlet.Filter' is an Interface, where as 'org.springframework.web.filter.OncePerRequestFilter' is a Class, also as you can see they belong to diffrent packages.
  While Filter intrerface has the 'doFilter()' as SAM(Single abstract Method), The 'OncePerRequestFilter' class has 'doFilterInternal()' as SAM.

• 'org.springframework.security.config.annotation.web.builders.HttpSecurity.httpBasic()' Configures HTTP Basic authentication.

• To use Default authentication (Http Authentication) and Custom authentication at the same time, using a filter for each. We will,
  1. Create a Custom Authentication.
  2. Create a Custom AuthenticationProvider that provides the authentication functionality using this custom authentication.
  3. Create a CustomAuthenticationManager that uses this authentication provider to authenticate the requests.
  4. A Filter class that is an extension of the OncePerRequestFilter, and do the 4 step process in the doFilterInternal(). These steps are creating a CustomAuthentication 
     instance representing the authentication that is not authenticated yet using the input api-key, create an CustomAuthenticationFilterManager instance, delegate the responsibility 
     of authentication to CustomAuthenticationManager, if authenticated then set this authentication object in the SecurityContext and call the next filter in the filter chain.

